// this script reads from countryCode.csv and moreCountryName.csvfile and generate go syntax in ../data/data.go
// The country names are stored in ./countryCode.csv and ./moreCountryName.csv
// ./countryCode.csv stores official country names and their corresponding country codes
// ./moreCountryName.csv stores common country names and their corresponding country codes

package main

import (
	"encoding/csv"
	"fmt"
	"log"
	"os"
)

func readCsvFile(filePath string) [][]string {
	f, err := os.Open(filePath)
	if err != nil {
		log.Fatal("Unable to read input file "+filePath, err)
	}
	defer f.Close()

	csvReader := csv.NewReader(f)
	csvReader.Comma = '|'
	csvReader.TrimLeadingSpace = true
	records, err := csvReader.ReadAll()
	if err != nil {
		log.Fatal("Unable to parse file as CSV for "+filePath, err)
	}

	return records
}

func saveCsvFile(filePath string, record [][]string) error {
	f, err := os.OpenFile(filePath, os.O_RDWR|os.O_CREATE, 0644)
	if err != nil {
		log.Fatal("Fail to create" + filePath)
	}
	defer f.Close()

	csvWriter := csv.NewWriter(f)
	csvWriter.Comma = '|'
	defer csvWriter.Flush()
	err = csvWriter.WriteAll(record)
	return err
}

func main() {
	nameToCode := make(map[string]string)
	codeToName := make(map[string]string)
	countryCode := readCsvFile("./countryCode.csv")
	moreCountryName := readCsvFile("./moreCountryName.csv")
	for _, row := range countryCode {
		nameToCode[row[0]] = row[1]
		codeToName[row[1]] = row[0]
	}
	for _, row := range moreCountryName {
		nameToCode[row[0]] = row[1]
	}

	// write to data.go
	datafile, err := os.OpenFile("../data/data.go", os.O_RDWR|os.O_CREATE, 0644)
	if err != nil {
		log.Fatal("Fail to create" + "../data/data.go")
	}
	defer datafile.Close()

	// write to data.go
	// header
	fmt.Fprintf(datafile, "// Generated By script/script.go\n")
	fmt.Fprintf(datafile, "package data\n")

	// write var NameToCode = map[string]string
	fmt.Fprintf(datafile, "var NameToCode = map[string]string{\n")
	for k, v := range nameToCode {
		fmt.Fprintf(datafile, "\"%s\" : \"%s\",\n", k, v)
	}
	fmt.Fprintf(datafile, "}\n")

	// write var CodeToName = map[string]string
	fmt.Fprintf(datafile, "var CodeToName = map[string]string{\n")
	for k, v := range codeToName {
		fmt.Fprintf(datafile, "\"%s\" : \"%s\",\n", k, v)
	}
	fmt.Fprintf(datafile, "}\n")
}
